#!/bin/bash

set +xv -euo pipefail
umask 077

ramfs_mount_point="$(mktemp -d)"
disk_encryption_key_file="$ramfs_mount_point/keyfile"

help() {
	printf "Usage: %s <encrypted-keyfile> <disk> [cryptsetup-options]\n\n" "$0"
	fold -w 80 -s <<HELPEOF
This is a Bash script that runs cryptsetup's luksAddKey, passing in a keyfile generated with m4_APPNAME.  It is designed for use with the m4_APPNAME mkinitcpio or initramfs-tools hooks.

<encrypted-keyfile> must have been generated by m4_APPNAME enrol.

This script must be run as root.

!!! Make an off-system backup of your LUKS header for <disk> before running this command. !!!

You should also make a backup of <encrypted-keyfile>, because without this file the new keyslot on disk cannot be used.
HELPEOF
}

cleanup() {
	# Try really hard to clean up, even if part of cleanup fails
	set +e
	rm -f "$disk_encryption_key_file"
	umount -f -q "$ramfs_mount_point"
	rm -rf "$ramfs_mount_point"
}

trap cleanup EXIT TERM INT

if [ "$#" -lt 2 ] || [ "$(id -u)" -ne 0 ]; then
	help
	exit 1
fi

mount -t ramfs -o size=64k "$ramfs_mount_point" "$ramfs_mount_point"
m4_APPNAME generate -f "$1" > "$disk_encryption_key_file"
cryptsetup luksAddKey "$2" "${@:3}" "$disk_encryption_key_file"
: < /dev/null > "$disk_encryption_key_file"
